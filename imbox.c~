#include<stdio.h>
#include<math.h>
#include<stdlib.h>
#define ll long long int

typedef struct rect_
{
  ll x1,x2,y1,y2;
}rect;

/* Function to merge the two haves arr[l..m] and arr[m+1..r] of array arr[] */
void merg(ll arr[], ll l, ll m, ll r)
{
    ll i, j, k;
    ll n1 = m - l + 1;
    ll n2 =  r - m;

    /* create temp arrays */
    ll *L = (ll *)malloc(sizeof(ll)*n1);
    ll *R = (ll *)malloc(sizeof(ll)*n2);

    /* Copy data to temp arrays L[] and R[] */
    for(i = 0; i < n1; i++)
        L[i] = arr[l + i];
    for(j = 0; j <= n2; j++)
        R[j] = arr[m + 1+ j];

    /* Merge the temp arrays back llo arr[l..r]*/
    i = 0;
    j = 0;
    k = l;
    while (i < n1 && j < n2)
    {
        if (L[i] <= R[j])
        {
            arr[k] = L[i];
            i++;
        }
        else
        {
            arr[k] = R[j];
            j++;
        }
        k++;
    }

    /* Copy the remaining elements of L[], if there are any */
    while (i < n1)
    {
        arr[k] = L[i];
        i++;
        k++;
    }

    /* Copy the remaining elements of R[], if there are any */
    while (j < n2)
    {
        arr[k] = R[j];
        j++;
        k++;
    }
}

/* l is for left index and r is right index of the sub-array
  of arr to be sorted */
void sor(ll arr[], ll l, ll r)
{
    if (l < r)
    {
        ll m = l+(r-l)/2; //Same as (l+r)/2, but avoids overflow for large l and h
        sor(arr, l, m);
        sor(arr, m+1, r);
        merg(arr, l, m, r);
    }
}

void main()
{
    ll n,i,j;
    scanf("%d",&n);
    rect r[n];
    ll a[n];
    ll b[n];
    ll sum=0;
    for(i=0;i<n;i++)
    {
        b[i]=1;
        scanf("%lld%lld%lld%lld",&r[i].x1,&r[i].y1,&r[i].x2,&r[i].y2);
        a[i]=(r[i].x2-r[i].x1)*(r[i].y2-r[i].y1);
    }
    sor(a,0,n-1);
    for(i=n-1;i>=0;i--)
    {
        if(b[i]==0)
            continue;
        for(j=i-1;j>=0;j--)
        {
            if((b[j]!=0) &&((r[j].x2<r[i].x2 && r[j].x2>r[i].x1 && r[j].y2>r[i].y1 && r[j].y2<r[i].y2) || (r[j].x1<r[i].x2 && r[j].x1>r[i].x1 && r[j].y1>r[i].y1 && r[j].y1<r[i].y2)))
                b[j]=0;
        }
        sum+=a[i];
    }
    printf("%lld",sum);
}
